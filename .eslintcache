[{"D:\\projects\\dashboard\\src\\index.js":"1","D:\\projects\\dashboard\\src\\App.js":"2","D:\\projects\\dashboard\\src\\components\\header\\index.jsx":"3","D:\\projects\\dashboard\\src\\components\\header\\style.js":"4","D:\\projects\\dashboard\\src\\styles.js":"5","D:\\projects\\dashboard\\src\\components\\sidebar\\index.jsx":"6","D:\\projects\\dashboard\\src\\components\\sidebar\\style.js":"7","D:\\projects\\dashboard\\src\\components\\sidebar\\const.js":"8","D:\\projects\\dashboard\\src\\components\\users\\index.jsx":"9","D:\\projects\\dashboard\\src\\components\\users\\usersHeader\\index.jsx":"10","D:\\projects\\dashboard\\src\\components\\users\\usersTable\\index.jsx":"11","D:\\projects\\dashboard\\src\\components\\users\\usersHeader\\iconFilter.jsx":"12","D:\\projects\\dashboard\\src\\components\\users\\style.js":"13","D:\\projects\\dashboard\\src\\components\\users\\usersHeader\\style.js":"14","D:\\projects\\dashboard\\src\\components\\users\\usersTable\\style.js":"15","D:\\projects\\dashboard\\src\\components\\users\\usersTable\\const.js":"16","D:\\projects\\dashboard\\src\\components\\users\\usersTable\\tableHeader.jsx":"17","D:\\projects\\dashboard\\src\\components\\users\\usersHeader\\popUp\\index.jsx":"18","D:\\projects\\dashboard\\src\\components\\users\\usersHeader\\popUp\\style.js":"19","D:\\projects\\dashboard\\src\\components\\products\\index.jsx":"20","D:\\projects\\dashboard\\src\\components\\products\\productsHeader\\index.jsx":"21","D:\\projects\\dashboard\\src\\components\\products\\productsHeader\\style.js":"22"},{"size":490,"mtime":1610871416416,"results":"23","hashOfConfig":"24"},{"size":758,"mtime":1610953553460,"results":"25","hashOfConfig":"24"},{"size":1110,"mtime":1610791296185,"results":"26","hashOfConfig":"24"},{"size":498,"mtime":1610791188389,"results":"27","hashOfConfig":"24"},{"size":351,"mtime":1610871470654,"results":"28","hashOfConfig":"24"},{"size":2196,"mtime":1610734919424,"results":"29","hashOfConfig":"24"},{"size":1381,"mtime":1610906524841,"results":"30","hashOfConfig":"24"},{"size":922,"mtime":1610953022185,"results":"31","hashOfConfig":"24"},{"size":333,"mtime":1610790646017,"results":"32","hashOfConfig":"24"},{"size":1645,"mtime":1610903763956,"results":"33","hashOfConfig":"24"},{"size":5868,"mtime":1610906076650,"results":"34","hashOfConfig":"24"},{"size":599,"mtime":1610789905469,"results":"35","hashOfConfig":"24"},{"size":206,"mtime":1610953567723,"results":"36","hashOfConfig":"24"},{"size":375,"mtime":1610873737242,"results":"37","hashOfConfig":"24"},{"size":610,"mtime":1610875853609,"results":"38","hashOfConfig":"24"},{"size":9246,"mtime":1610903325407,"results":"39","hashOfConfig":"24"},{"size":2465,"mtime":1610901374522,"results":"40","hashOfConfig":"24"},{"size":4540,"mtime":1610906036738,"results":"41","hashOfConfig":"24"},{"size":1066,"mtime":1610906046791,"results":"42","hashOfConfig":"24"},{"size":172,"mtime":1610953204269,"results":"43","hashOfConfig":"24"},{"size":1118,"mtime":1610956664107,"results":"44","hashOfConfig":"24"},{"size":1121,"mtime":1610956606367,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1mj5fkk",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\projects\\dashboard\\src\\index.js",[],["94","95"],"D:\\projects\\dashboard\\src\\App.js",[],"D:\\projects\\dashboard\\src\\components\\header\\index.jsx",[],"D:\\projects\\dashboard\\src\\components\\header\\style.js",[],"D:\\projects\\dashboard\\src\\styles.js",[],"D:\\projects\\dashboard\\src\\components\\sidebar\\index.jsx",["96"],"import React from 'react'\r\nimport {\r\n  Drawer,\r\n  Paper,\r\n  Typography,\r\n  ListItem,\r\n  List,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Divider,\r\n  Button,\r\n  Grid,\r\n} from '@material-ui/core'\r\nimport ContactSupportOutlinedIcon from '@material-ui/icons/ContactSupportOutlined'\r\nimport avatar from '../../assets/navSidebar/profileImg.png'\r\nimport useStyles from './style'\r\nimport { sidebarItems } from './const'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nconst SidebarNav = () => {\r\n  const classes = useStyles()\r\n  return (\r\n\r\n        <Drawer\r\n          className={classes.sidebar}\r\n          variant=\"permanent\"\r\n          anchor=\"left\"\r\n          classes={{\r\n            paper: classes.root,\r\n          }}\r\n        >\r\n          <Paper elevation={0} className={classes.avatar}>\r\n            <img src={avatar} alt=\"\" />\r\n            <Typography variant=\"h5\" className={classes.name}>\r\n              Roman Kutepov\r\n            </Typography>\r\n            <Typography variant=\"span\" className={classes.profession}>\r\n              Brain Director\r\n            </Typography>\r\n          </Paper>\r\n          <Divider variant=\"middle\" />\r\n          <List className={classes.list}>\r\n            {sidebarItems.map((item, index) => (\r\n              <ListItem\r\n                component=\"li\"\r\n                button\r\n                key={item.text}\r\n                className={classes.listItem}\r\n              >\r\n                <NavLink\r\n                  to={item.link}\r\n                  className={classes.link}\r\n                  activeClassName={classes.activeLink}\r\n                >\r\n                  <ListItemIcon>{item.icon}</ListItemIcon>\r\n                  <ListItemText primary={item.text} />\r\n                </NavLink>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          <Divider variant=\"middle\" />\r\n          <Typography variant=\"span\" className={classes.span}>\r\n            Support\r\n          </Typography>\r\n          <Button\r\n            startIcon={<ContactSupportOutlinedIcon />}\r\n            classes={{\r\n              label: classes.btn,\r\n            }}\r\n          >\r\n            Support\r\n          </Button>\r\n        </Drawer>\r\n  )\r\n}\r\n\r\nexport default SidebarNav\r\n","D:\\projects\\dashboard\\src\\components\\sidebar\\style.js",[],"D:\\projects\\dashboard\\src\\components\\sidebar\\const.js",[],"D:\\projects\\dashboard\\src\\components\\users\\index.jsx",[],"D:\\projects\\dashboard\\src\\components\\users\\usersHeader\\index.jsx",[],"D:\\projects\\dashboard\\src\\components\\users\\usersTable\\index.jsx",["97"],"import React from 'react'\r\nimport Table from '@material-ui/core/Table'\r\nimport TableBody from '@material-ui/core/TableBody'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableContainer from '@material-ui/core/TableContainer'\r\nimport TableHead from '@material-ui/core/TableHead'\r\nimport TablePagination from '@material-ui/core/TablePagination'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport useStyles from './style'\r\nimport {rows} from './const'\r\nimport TableHeader from './tableHeader'\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1\r\n  }\r\n  return 0\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy)\r\n}\r\n\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index])\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0])\r\n    if (order !== 0) return order\r\n    return a[1] - b[1]\r\n  })\r\n  return stabilizedThis.map((el) => el[0])\r\n}\r\n\r\nfunction UsersTable() {\r\n  const classes = useStyles()\r\n  const [order, setOrder] = React.useState('asc')\r\n  const [orderBy, setOrderBy] = React.useState('calories')\r\n  const [selected, setSelected] = React.useState([])\r\n  const [page, setPage] = React.useState(0)\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc'\r\n    setOrder(isAsc ? 'desc' : 'asc')\r\n    setOrderBy(property)\r\n  }\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.id)\r\n      setSelected(newSelecteds)\r\n      return\r\n    }\r\n    setSelected([])\r\n  }\r\n\r\n  const handleClick = (event, id) => {\r\n    const selectedIndex = selected.indexOf(id)\r\n    let newSelected = []\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, id)\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1))\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1))\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      )\r\n    }\r\n\r\n    setSelected(newSelected)\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage)\r\n  }\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10))\r\n    setPage(0)\r\n  }\r\n\r\n  const isSelected = (id) => selected.indexOf(id) !== -1\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <TableContainer>\r\n          <Table\r\n            className={classes.table}\r\n            aria-labelledby=\"tableTitle\"\r\n            aria-label=\"enhanced table\"\r\n          >\r\n            <TableHeader\r\n              classes={classes}\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row.id)\r\n                  const labelId = `enhanced-table-checkbox-${index}`\r\n                  return (\r\n                    <TableRow\r\n                      classes={{\r\n                        selected: classes.selected,\r\n                      }}\r\n                      className={classes.row}\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row.id)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{ 'aria-labelledby': labelId }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                      >\r\n                        <img src={row.img} alt=\"\" style={{ width: '25px' }} />\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{row.id}</TableCell>\r\n                      <TableCell align=\"right\">{row.phoneNumber}</TableCell>\r\n                      <TableCell align=\"right\">{row.emailAddress}</TableCell>\r\n                      <TableCell align=\"right\">{row.data}</TableCell>\r\n                    </TableRow>\r\n                  )\r\n                })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[10, 20, 30]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UsersTable\r\n","D:\\projects\\dashboard\\src\\components\\users\\usersHeader\\iconFilter.jsx",[],"D:\\projects\\dashboard\\src\\components\\users\\style.js",[],"D:\\projects\\dashboard\\src\\components\\users\\usersHeader\\style.js",[],"D:\\projects\\dashboard\\src\\components\\users\\usersTable\\style.js",[],"D:\\projects\\dashboard\\src\\components\\users\\usersTable\\const.js",[],"D:\\projects\\dashboard\\src\\components\\users\\usersTable\\tableHeader.jsx",[],"D:\\projects\\dashboard\\src\\components\\users\\usersHeader\\popUp\\index.jsx",["98"],"import React from 'react'\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogActions,\r\n  Button,\r\n  DialogContent,\r\n  Grid,\r\n  DialogContentText,\r\n  TextField,\r\n  Box,\r\n} from '@material-ui/core'\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack'\r\nimport logo from '../../../../assets/logo.svg'\r\nimport useStyles from './style'\r\nimport {rows} from '../../usersTable/const'\r\n\r\nconst AddUser = ({ open, setOpen}) => {\r\n  const classes = useStyles()\r\n  const [newUser, setNewUser] = React.useState({\r\n    name: '',\r\n    img: '',\r\n    id: '',\r\n    phoneNumber: '',\r\n    emailAddress: '',\r\n    data: '',\r\n  })\r\n  const createID = () => {\r\n    return 'DEV' + Math.random().toString(10).substr(2, 9)\r\n  }\r\n  const currentDate = () => {\r\n    const newDate = new Date()\r\n    const date = newDate.getDate()\r\n    const month = newDate.getMonth() + 1\r\n    const year = newDate.getFullYear()\r\n    const separator = '/'\r\n    const result = `${date}${separator}${\r\n      month < 10 ? `0${month}` : `${month}`\r\n    }${separator}${year}`\r\n    return result\r\n  }\r\n const handleClickcClose = () => {\r\n    setOpen(false)\r\n  }\r\n  const saveData = (event) => {\r\n    setNewUser({\r\n      name: event.target.value,\r\n      img: event.target.value,\r\n      id: createID(),\r\n      phoneNumber: event.target.value,\r\n      emailAddress: event.target.value,\r\n      data: currentDate(),\r\n    })\r\n    console.log(event.target)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    handleClickcClose()\r\n    event.preventDefault()\r\n    rows.push(newUser)\r\n  }\r\n\r\n \r\n  return (\r\n    <Dialog\r\n      open={open}\r\n      onClose={handleClickcClose}\r\n      aria-labelledBy=\"form-dialog-title\"\r\n      classes={{ paper: classes.paper, paperWidthSm: classes.paper }}\r\n    >\r\n      <Grid container>\r\n        <Grid item md={6} className={classes.item}>\r\n          <DialogActions\r\n            classes={{\r\n              root: classes.dialogActions,\r\n            }}\r\n          >\r\n            <Button startIcon={<ArrowBackIcon />} onClick={handleClickcClose}>\r\n              Go back\r\n            </Button>\r\n          </DialogActions>\r\n          <DialogTitle\r\n            id=\"form-dialog-title\"\r\n            classes={{ root: classes.dialogTitle }}\r\n          >\r\n            Create a new user\r\n          </DialogTitle>\r\n          <DialogContentText className={classes.dialogContentText}>\r\n            Add main information about user\r\n          </DialogContentText>\r\n          <DialogContent\r\n            classes={{\r\n              root: classes.itemDialogContent,\r\n            }}\r\n          >\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"name\"\r\n                label=\"Full Name\"\r\n                type=\"text\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                className={classes.textField}\r\n                onChange={(event) => saveData(event)}\r\n              />\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"email\"\r\n                label=\"Email\"\r\n                type=\"email\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                className={classes.textField}\r\n                onChange={(event) => saveData(event)}\r\n              />\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"phone\"\r\n                label=\"Phone\"\r\n                type=\"text\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                className={classes.textField}\r\n                onChange={(event) => saveData(event)}\r\n              />\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                id=\"img\"\r\n                label=\"Image url\"\r\n                type=\"text\"\r\n                fullWidth\r\n                variant=\"outlined\"\r\n                className={classes.textField}\r\n                onChange={(event) => saveData(event)}\r\n              />\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                className={classes.itemBtn}\r\n                onClick={handleSubmit}\r\n              >\r\n                Add NEW USER\r\n              </Button>\r\n          </DialogContent>\r\n        </Grid>\r\n        <Grid item md={6} style={{ widht: '480px', height: '100%' }}>\r\n          <Box className={classes.itemBox}>\r\n            <img src={logo} alt=\"\" className={classes.logo}/>\r\n          </Box>\r\n        </Grid>\r\n      </Grid>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default AddUser\r\n","D:\\projects\\dashboard\\src\\components\\users\\usersHeader\\popUp\\style.js",[],"D:\\projects\\dashboard\\src\\components\\products\\index.jsx",[],"D:\\projects\\dashboard\\src\\components\\products\\productsHeader\\index.jsx",[],"D:\\projects\\dashboard\\src\\components\\products\\productsHeader\\style.js",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":12,"column":3,"nodeType":"105","messageId":"106","endLine":12,"endColumn":7},{"ruleId":"103","severity":1,"message":"107","line":6,"column":8,"nodeType":"105","messageId":"106","endLine":6,"endColumn":17},{"ruleId":"108","severity":1,"message":"109","line":68,"column":7,"nodeType":"110","endLine":68,"endColumn":42},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],"no-unused-vars","'Grid' is defined but never used.","Identifier","unusedVar","'TableHead' is defined but never used.","jsx-a11y/aria-props","aria-labelledBy: This attribute is an invalid ARIA attribute. Did you mean to use aria-labelledby?","JSXAttribute","no-global-assign","no-unsafe-negation"]